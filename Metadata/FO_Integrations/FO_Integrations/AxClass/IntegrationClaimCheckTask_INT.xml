<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntegrationClaimCheckTask_INT</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class IntegrationClaimCheckTask_INT	extends SysOperationServiceBase
{

    private IntegrationRequest_INT request;
    private IntegrationRequestData_INT requestData;
    private IntegrationSetup_INT setup;
    private IntegrationLogging_INT logging;




}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process(IntegrationClaimCheckServiceDC_INT _contract)
    {
        Integration_INT  integration;
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        select firstonly request
            where request.Identifier == _contract.parmIdentifier()
                join setup
            where setup.IntegrationName == request.IntegrationName
                join requestData
            where requestData.Identifier == _contract.parmIdentifier()
                && requestData.RunIdentifier == _contract.parmRunIdentifier();


            if(request)
            {
                integration = setup.createIntegration(_contract.parmCompany(),requestData.Input);
                integration.parmIdentifier(request.Identifier);
                integration.parmRelatedRequest(request.RelatedRequest);

                IntegrationParseable_INT input = IntegrationParseable_INT::Construct(integration);
                logging = IntegrationLogging_INT::construct(integration,_contract.parmRunIdentifier());
                logging.logKeywords(_contract.parmServiceBusQueueTopic(),'','');

                logging.logProcessing();

                try
                {
                    changecompany (_contract.parmCompany())
                    {

                        IntegrationSetupClaimCheck_INT test = setup as IntegrationSetupClaimCheck_INT;
                        IntegrationTransport_INT transport = test.getTransportObject();

                        IntegrationReturnable_INT result = transport.process(_contract.parmServiceBusQueueTopic());
                        if(result.parmSuccess())
                        {   
                            logging.LogComplete(result);
                        }
                        else
                        {
                            logging.LogErrorFromResponse(result);
                        }


                        
                    }
                }
            
                catch (xppEx)
                {
                    logging.logError(xppEx);
                    
                }
                catch (Exception::CLRError)
                {
                    System.Exception ex = CLRInterop::getLastException();
                    logging.logError(ex);
                    
                }
                catch
                {
           
                    IntegrationReturnable_INT error;
                    error = new IntegrationReturnable_INT();
                    error.parmException(IntegrationProcessingService_INT::retrieveInfologMessages());
                    error.parmSuccess(false);
                    logging.LogErrorFromResponse(error);

                    
        
                }
            }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>