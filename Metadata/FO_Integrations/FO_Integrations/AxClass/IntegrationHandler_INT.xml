<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntegrationHandler_INT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The handler class for processing an integration
/// </summary>
public class IntegrationHandler_INT
{
    protected IntegrationLogging_INT logging;
    protected Integration_INT integration;
    protected IntegrationSetup_INT integrationSetup;
    protected guid runIdentifier;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>New</Name>
				<Source><![CDATA[
    /// <summary>
    /// Default new, inits the loggin used for duration of the integration
    /// </summary>
    /// <param name = "_integration">The integration to process</param>
    protected void New(Integration_INT _integration)
    {
        runIdentifier = newGuid();
        integration = _integration;
        integrationSetup = integration.parmIntegrationSetup();
        logging = IntegrationLogging_INT::construct(_integration,runIdentifier);
 
    }

]]></Source>
			</Method>
			<Method>
				<Name>HandleEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the integration or schedules a async job execution
    /// </summary>
    /// <param name = "_integration">The integration to process</param>
    /// <returns>The result to return</returns>
    public static IntegrationReturnable_INT HandleEvent(Integration_INT _integration)
    {
        IntegrationHandler_INT handler = new IntegrationHandler_INT(_integration);
        return handler.HandleEventInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HandleEventInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// The internal method to process or schedule
    /// </summary>
    /// <returns>The result</returns>
    private IntegrationReturnable_INT HandleEventInternal()
    {
        IntegrationReturnable_INT result;
        logging.initLog(integration.parmPayload());

        switch (integrationSetup.getInstanceRelationType())
        {
            case tableStr(IntegrationSetupOut_INT):
                IntegrationSetupOut_INT outSetup = integrationSetup;
                switch(outSetup.IntegrationOutType)
                {
                    case IntegrationTypeOut_INT::Sync:
                        result = IntegrationProcessingController_INT::processRequestSync(this.integration,this.runIdentifier);
                        
                        break;
                    default:
                        logging.logAsyncSchedule();
                        IntegrationProcessingController_INT::processRequest(this.integration.parmIdentifier(),runIdentifier,SysOperationExecutionMode::ReliableAsynchronous);
                        result = new IntegrationReturnable_INT();
                        result.parmIndentifier(this.integration.parmIdentifier());
                        break;
                }
                break;
            
            case tableStr(IntegrationSetupIn_INT):
                IntegrationSetupIn_INT inSetup = integrationSetup;
                switch(inSetup.IntegrationInType)
                {
                    case IntegrationTypeIn_INT::Sync:
                        result = IntegrationProcessingController_INT::processRequestSync(this.integration,this.runIdentifier);
                        
                        break;

                    default:
                        logging.logAsyncSchedule();
                        SysOperationExecutionMode executionMode;
                        if(inSetup.AsyncBatchExecution)
                        {
                            executionMode = SysOperationExecutionMode::ScheduledBatch;
                        }
                        else
                        {
                            executionMode = SysOperationExecutionMode::ReliableAsynchronous;
                        }
                        IntegrationProcessingController_INT::processRequest(this.integration.parmIdentifier(),runIdentifier,executionMode);
                        result = new IntegrationReturnable_INT();
                        result.parmIndentifier(this.integration.parmIdentifier());
                        
                        break;
                }
                break;
            case tableStr(IntegrationSetupClaimCheck_INT):

                logging.logAsyncSchedule();

      
                IntegrationClaimCheckDC_INT dc = FormJsonSerializer::deserializeObject(classNum(IntegrationClaimCheckDC_INT),this.integration.parmPayload());
                logging.logKeywords(dc.parmServiceBusQueueTopic(),'','');
                IntegrationClaimCheckController_INT::processRequest(this.integration.parmIdentifier(),this.runIdentifier,this.integration.parmCompany(),dc.parmServiceBusQueueTopic());

                result = new IntegrationReturnable_INT();
                result.parmIndentifier(this.integration.parmIdentifier());

                logging.LogComplete(result);
                        
                break;

        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleEarlyException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method for processing an early exception before the handle event could be called
    /// </summary>
    /// <param name = "_ex">The error</param>
    /// <param name = "_integrationName">The integration that was trying to be called</param>
    /// <param name = "_company">The company parameter</param>
    /// <param name = "_payload">The payload</param>
    /// <returns>The result to return to integration, a graceful return</returns>
    public static IntegrationReturnable_INT handleEarlyException(System.Exception _ex,str _integrationName,DataAreaId _company, str _payload)
    {
        IntegrationReturnable_INT result;
        IntegrationSetup_INT unknownIntegration;
        unknownIntegration.IntegrationName = _integrationName;
        guid identifier = newGuid();
        IntegrationLogging_INT logging =  IntegrationLogging_INT::constructFromValues(unknownIntegration.IntegrationName,identifier,identifier,_company);
        logging.initLog(_payload);
        logging.logError(_ex);
        result = IntegrationReturnable_INT::createFromException(_ex,identifier);
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>