<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntegrationTransportRest_INT</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net;
/// <summary>
/// Integration class for outbound restCalls
/// </summary>
public class IntegrationTransportRest_INT extends IntegrationTransport_INT
{
    protected IntegrationSetupRest_INT  restSetup;
    protected HttpWebRequest webRequest;
    protected System.Text.Encoding encoding;
    private HttpStatusCode statusCode;
    protected str payload;
    protected boolean allowTokenReuse;
    protected str lastToken;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRestSetup</Name>
				<Source><![CDATA[
    public IntegrationSetupRest_INT parmRestSetup(IntegrationSetupRest_INT _restSetup = restSetup)
    {
        restSetup = _restSetup;
        return restSetup;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastToken</Name>
				<Source><![CDATA[
    public str parmLastToken(str _lastToken = lastToken)
    {
        lastToken = _lastToken;
        return lastToken;

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowTokenReuse</Name>
				<Source><![CDATA[
    public boolean parmAllowTokenReuse(boolean _allowTokenReuse = allowTokenReuse)
    {
        allowTokenReuse = _allowTokenReuse;
        return allowTokenReuse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>New</Name>
				<Source><![CDATA[
    /// <summary>
    /// Default new
    /// </summary>
    /// <param name = "_setup">The setup to use in the request</param>
    public void New(IntegrationSetupRest_INT _setup,IntegrationSetupOut_INT _integration )
    {
        super(_setup,_integration);
        restSetup  = _setup;
        
        encoding = System.Text.Encoding::UTF8;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the status call for the last call
    /// </summary>
    /// <returns>The statuscode</returns>
    public HttpStatusCode getStatusCode()
    {
        return statusCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the request
    /// </summary>
    protected void initRequest()
    {
        webRequest =  System.Net.WebRequest::Create(restSetup.getUri());
        webRequest.Method = restSetup.parmMethod();
        if(restSetup.parmMethod() != 'GET')
        {
            webRequest.ContentType = restSetup.parmContentType();
        }

        if(restSetup.getTimeOut() > 0)
        {
            webRequest.timeout = restSetup.getTimeOut();
        }
     

    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the headers on the integration
    /// </summary>
    protected void setHeaders()
    {
        System.Net.WebHeaderCollection headerCollection = webRequest.Headers;

        if(setup is IntegrationSetupRestBasic_INT)
        {
            IntegrationSetupRestBasic_INT basic = setup as IntegrationSetupRestBasic_INT;
            headerCollection.Set('Authorization',basic.getAuthValue());
        }
        else if( setup is IntegrationSetupRestOAuth_INT)
        {
            IntegrationSetupRestOAuth_INT oauth = setup as IntegrationSetupRestOAuth_INT;
            str  token = this.GetAuthenticationHeader(oauth);
            headerCollection.Set('Authorization','Bearer ' + token);
        }
        if(restSetup.parmXmSVersion() != '')
        {
            headerCollection.Set('x-ms-version',restSetup.parmXmSVersion());
        }
        if(restSetup.parmSubscriptionKey() != '')
        {
            headerCollection.Set('Ocp-Apim-Subscription-Key',restSetup.parmSubscriptionKey());
        }
        if(this.parmCorrelationId() != emptyGuid())
        {
            headerCollection.Set('x-correlation-id',guid2StrWithoutBraces(this.parmCorrelationId()));
        
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAuthenticationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an Authenticationheader for oauth Integration
    /// Creates a new Outbound rest call of same instance for getting the oauth token
    /// </summary>
    /// <param name = "_oauth">The setup</param>
    /// <returns>the access_token</returns>

    protected str GetAuthenticationHeader(IntegrationSetupRestOAuth_INT _oauth)
    {
        if(lastToken != '' && allowTokenReuse)
        {
            return this.lastToken;
        }

        IntegrationSetupRest_INT OauthSetup = new IntegrationSetupRest_INT();

        OauthSetup.parmUrl(_oauth.parmAuthUrl());
        OauthSetup.parmMethod('POST');
        OauthSetup.parmContentType('application/x-www-form-urlencoded');

        IntegrationTransportRest_INT outBoundRest = IntegrationTransportRest_INT::constructor(OauthSetup,this.integration);
        str AuthPayload = _oauth.getAuthValue();

        IntegrationRestResponse_INT IntegrationResponse = outBoundRest.process(AuthPayload);
        str response = IntegrationResponse.parmResponse();
        
        Newtonsoft.Json.Linq.JObject JObject = Newtonsoft.Json.Linq.JObject::Parse(response);
        if(!JObject)
        {
            throw Error("@Integrations_INT:ParseError",response);
        }
        Newtonsoft.Json.Linq.JToken access_token =  JObject.GetValue('access_token');

        if(!access_token)
        {
            throw Error("@Integrations_INT:NoToken",response);
        }
        str token = access_token.ToString();
        this.parmLastToken(token);
        return token;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the data to requestSteam
    /// </summary>
    /// <param name = "_payload">The payload to write</param>
    protected void writeRequest()
    {
        str _payload = this.payload;

        if(restSetup.parmMethod() != 'GET' && _payload != '')
        {
            System.IO.Stream requestStream;
            System.Byte[] requestData = encoding.GetBytes(_payload);
            webRequest.ContentLength = requestData.get_Length();
            requestStream = webRequest.GetRequestStream();
            requestStream.Write(requestData, 0, requestData.Length);
        }
        else
        {
            webRequest.ContentLength = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the response from the request
    /// </summary>
    /// <returns>The response</returns>
    protected IntegrationRestResponse_INT getResponse()
    {
        IntegrationRestResponse_INT restResponse = new IntegrationRestResponse_INT();
        restResponse.parmOriginalUrl(webRequest.RequestUri.ToString());
        HttpWebResponse      webResponse;
        System.IO.Stream				responseStream;
        System.IO.StreamReader			responseReader;
        str response;
        System.Exception ex;
        int intStatusCode;
        try
        {
            webResponse = webRequest.GetResponse();
            statusCode = webResponse.StatusCode;

            intStatusCode = System.Convert::ToInt32(statusCode);
            restResponse.parmStatusCode(intStatusCode);

            if(webResponse.ContentLength != 0)
            {
                responseStream = webResponse.getResponseStream();
                responseReader = new System.IO.StreamReader(responseStream,encoding);
                response = responseReader.ReadToEnd();
            }
            
            for(int i = 0; webResponse.Headers.Count > i ; i++)
            {
                str header  = webResponse.Headers.GetKey(i);
                str value = webResponse.Headers.Get(header);
                if(header == 'CorrelationId')
                {
                    restResponse.parmCorrelationId(str2Guid(strReplace(value,'\"','')));
                }
                if(header == 'BrokerProperties')
                {
                    IntegrationBrokerPropertiesDC_INT brokerprop = FormJsonSerializer::deserializeObject(classNum('IntegrationBrokerPropertiesDC_INT'),value);
                    restResponse.parmBrokerProperties(brokerprop);
                }
            }
        }
        catch(ex)
        {
            if(ex is System.Net.WebException)
            {
                WebException webException = ex as WebException;
                webResponse = webException.Response;
                statusCode = webResponse.StatusCode;
                responseStream = webResponse.getResponseStream();
                responseReader = new System.IO.StreamReader(responseStream,encoding);
                response = responseReader.ReadToEnd();
            }
            else
            {
                statusCode = HttpStatusCode::BadGateway;
            }


        }
        restResponse.parmResponse(response);


        if(intStatusCode >= 200 && intStatusCode < 300)
        {
            restResponse.parmSuccess(true);
        }
        else
        {
            restResponse.parmSuccess(false);
            restresponse.parmException(response);

        }
        
        return restResponse;


    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method for doing the rest call
    /// </summary>
    /// <param name = "_payload">The payload</param>
    /// <returns>the result</returns>
    public IntegrationReturnable_INT process(str _payload = '')
    {
        this.payload = _payload;
        this.initRequest();
        this.setHeaders();        
        this.writeRequest();
        IntegrationRestResponse_INT restResponse = this.getResponse();
        return restResponse;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for a outbound rest call
    /// </summary>
    /// <param name = "_setup">The setup parameters</param>
    /// <returns>the instance</returns>
    public static IntegrationTransportRest_INT constructor(IntegrationSetupRest_INT _setup,IntegrationSetupOut_INT _integration)
    {
        return new IntegrationTransportRest_INT(_setup,_integration);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>